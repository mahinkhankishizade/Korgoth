%{
#include<iostream>
#include "y.tab.h"
using namespace std;
int yyparse();
int counter = 0;
%}
%option yylineno

ASSIGNMENT =
DIGIT [0-9]
SPACE [ \t]+
STRING \'.*\'
ALPHABETIC [a-zA-Z]
ALPHANUMERIC ({ALPHABETIC}|{DIGIT})
VARIABLE {ALPHABETIC}{ALPHANUMERIC}*
SETVARIABLE [A-Z]+
VECTORVARIABLE [v][0-9]+
INTEGER [+-]?{DIGIT}+
FLOAT [-+]?{DIGIT}+\.{DIGIT}+
LPARANTHESIS \(
RPARANTHESIS \)
LCURLYBRACE \{
RCURLYBRACE \}
LSQUAREBRACKET \[
RSQUAREBRACKET \]
COMMA ,
NEWLINE \n
SEMICOLON ;
ADDITION \+
SUBTRACTION \-
MULTIPLICATION \*
DIVISION \/
MODULO \%
CROSSPRODUCT x
INCREMENT \+\+
DECREMENT \-\-
FACTORIAL !
EXPONENT \^
ABSOLUTE \|
BOOLEAN true|false
AND and
OR or
NOT ~
LESS <
GREATER >
LESSOREQUAL <=
GREATEROREQUAL >=
EQUAL ==
NOTEQUAL ~=
MAINFUNCTION doMath
FUNCTION function
RETURN return
FOR for
WHILE while
DO do
IF if
ELSE else
TAKE take
SHOW show
UNION U
INTERSECTION n
COMBINATION C
PERMUTATION P
SINE sin
COSINE cos
TANGENT tan
COTANGENT cot
SECANT sec
COSECANT csc
ARCSINE arcsin
ARCCOSINE arccos
ARCTANGENT arctan
ARCCOTANGENT arccot
MINIMUM min
MAXIMUM max
SQUAREROOT sqrt
NTHROOT nrt
LOGN ln
LOG log
PI PI
NATURALE e
NONSTAR [^\*]
NONSTARNONDIV [^\*/]s
NONNEWLINE [^\n]


%x IN_COMMENT 

%%
<INITIAL>"\""           {BEGIN(IN_COMMENT); counter++;}
<IN_COMMENT>"\""        {counter--;if(counter==0){BEGIN(INITIAL);} }
<IN_COMMENT>"\n"        {if(counter==0){BEGIN(INITIAL); }} 
<IN_COMMENT>.  

{NEWLINE} ;
{SPACE} ;
{MAINFUNCTION} return MAINFUNCTION;
{SEMICOLON} return SEMICOLON;
{IF} return IF;
{ELSE} return ELSE;
{RETURN} return RETURN;
{FOR} return FOR;
{WHILE} return WHILE;
{DO} return DO;
{COMMA} return COMMA;
{ASSIGNMENT} return ASSIGNMENT;
{AND} return AND;
{OR} return OR;
{EQUAL} return EQUAL;
{NOTEQUAL} return NOTEQUAL;
{NOT} return NOT;
{LESSOREQUAL} return LESSOREQUAL;
{GREATEROREQUAL} return GREATEROREQUAL;
{LESS} return LESS;
{GREATER} return GREATER;
{LCURLYBRACE} return LCURLYBRACE;
{RCURLYBRACE} return RCURLYBRACE;
{LSQUAREBRACKET} return LSQUAREBRACKET;
{RSQUAREBRACKET} return RSQUAREBRACKET;
{ADDITION} return ADDITION;
{SUBTRACTION} return SUBTRACTION;
{MULTIPLICATION} return MULTIPLICATION;
{DIVISION} return DIVISION;
{MODULO} return MODULO;
{CROSSPRODUCT} return CROSSPRODUCT;
{INCREMENT} return INCREMENT;
{DECREMENT} return DECREMENT;
{LPARANTHESIS} return LPARANTHESIS;
{RPARANTHESIS} return RPARANTHESIS;
{STRING} return STRING;
{BOOLEAN} return BOOLEAN;
{INTEGER} return INTEGER;
{FLOAT} return FLOAT;
{TAKE} return TAKE;
{SHOW} return SHOW;
{UNION} return UNION;
{INTERSECTION} return INTERSECTION;
{COMBINATION} return COMBINATION;
{PERMUTATION} return PERMUTATION;
{SINE} return SINE;
{COSINE} return COSINE;
{TANGENT} return TANGENT;
{COTANGENT} return COTANGENT;
{SECANT} return SECANT;
{COSECANT} return COSECANT;
{ARCSINE} return ARCSINE;
{ARCCOSINE} return ARCCOSINE;
{ARCTANGENT} return ARCTANGENT;
{ARCCOTANGENT} return ARCCOTANGENT;
{MINIMUM} return MINIMUM;
{MAXIMUM} return MAXIMUM;
{SQUAREROOT} return SQUAREROOT;
{NTHROOT} return NTHROOT;
{LOGN} return LOGN;
{LOG} return LOG;
{NATURALE} return NATURALE;
{PI} return PI;
{FACTORIAL} return FACTORIAL;
{EXPONENT} return EXPONENT;
{ABSOLUTE} return ABSOLUTE;
{FUNCTION} return FUNCTION;
{SETVARIABLE} return SETVARIABLE;
{VECTORVARIABLE} return VECTORVARIABLE;
{VARIABLE} {yylval.string=strdup(yytext);return VARIABLE;};;



%%
int yywrap()
{
	return 1;
}












